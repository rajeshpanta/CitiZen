import SwiftUI

struct ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏2: View {
    @StateObject var quizLogic = Quiz‡§§‡§∞‡•ç‡§ï()
    @State private var selectedAnswer: Int? = nil
    @State private var showAnswerFeedback: Bool = false
    @State private var isAnswerCorrect: Bool = false
    
    @State private var showQuitConfirmation: Bool = false
    @Environment(\.presentationMode) var presentationMode
    @State private var isAnswered: Bool = false
    
    let questions: [BilingualQuestion] = [
        BilingualQuestion(
            englishText: "Who wrote the Declaration of Independence?",
            nepaliText: "‡§∏‡•ç‡§µ‡§§‡§®‡•ç‡§§‡•ç‡§∞‡§§‡§æ‡§ï‡•ã ‡§ò‡•ã‡§∑‡§£‡§æ‡§™‡§§‡•ç‡§∞ ‡§ï‡§∏‡§≤‡•á ‡§≤‡•á‡§ñ‡•á‡§ï‡§æ ‡§•‡§ø‡§è?",
            englishOptions: ["George Washington", "Abraham Lincoln", "Benjamin Franklin", "Thomas Jefferson"],
            nepaliOptions: ["‡§ú‡§∞‡•ç‡§ú ‡§µ‡§æ‡§∂‡§ø‡§Ç‡§ó‡§ü‡§®", "‡§Ö‡§¨‡•ç‡§∞‡§æ‡§π‡§Æ ‡§≤‡§ø‡§Ç‡§ï‡§®", "‡§¨‡•á‡§Ç‡§ú‡§æ‡§Æ‡§ø‡§® ‡§´‡•ç‡§∞‡•ç‡§Ø‡§æ‡§ô‡•ç‡§ï‡§≤‡§ø‡§®", "‡§•‡•â‡§Æ‡§∏ ‡§ú‡•á‡§´‡§∞‡§∏‡§®‡§≤‡•á"],
            correctAnswer: 3
        ),

        BilingualQuestion(
            englishText: "How many U.S. Senators are there?",
            nepaliText: "‡§∏‡§Ç‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§Ö‡§Æ‡•á‡§∞‡§ø‡§ï‡§æ‡§Æ‡§æ ‡§ï‡•Å‡§≤ ‡§ï‡§§‡§ø ‡§ú‡§®‡§æ ‡§∏‡§ø‡§®‡•á‡§ü‡§∞ ‡§õ‡§®‡•ç?",
            englishOptions: ["50", "100", "435", "200"],
            nepaliOptions: ["‡•´‡•¶", "‡•ß‡•¶‡•¶", "‡•™‡•©‡•´", "‡•®‡•¶‡•¶"],
            correctAnswer: 1
        ),

        BilingualQuestion(
            englishText: "How long is a term for a U.S. Senator?",
            nepaliText: "‡§Ö‡§Æ‡•á‡§∞‡§ø‡§ï‡•Ä ‡§∏‡§ø‡§®‡•á‡§ü‡§∞‡§ï‡•ã ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡§æ‡§≤ ‡§ï‡§§‡§ø ‡§∏‡§Æ‡§Ø‡§ï‡•ã ‡§π‡•Å‡§®‡•ç‡§õ?",
            englishOptions: ["4 years", "2 years", "6 years", "8 years"],
            nepaliOptions: ["‡•™ ‡§µ‡§∞‡•ç‡§∑", "‡•® ‡§µ‡§∞‡•ç‡§∑", "‡•¨ ‡§µ‡§∞‡•ç‡§∑", "‡•Æ ‡§µ‡§∞‡•ç‡§∑"],
            correctAnswer: 2
        ),

        BilingualQuestion(
            englishText: "What is one responsibility of a U.S. citizen?",
            nepaliText: "‡§∏‡§Ç‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§Ö‡§Æ‡•á‡§∞‡§ø‡§ï‡§æ‡§ï‡•ã ‡§®‡§æ‡§ó‡§∞‡§ø‡§ï‡§ï‡•ã ‡§è‡§â‡§ü‡§æ ‡§ú‡§ø‡§Æ‡•ç‡§Æ‡•á‡§µ‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§π‡•ã?",
            englishOptions: ["Vote in elections", "Own a business", "Pay for health insurance", "Travel abroad"],
            nepaliOptions: ["‡§®‡§ø‡§∞‡•ç‡§µ‡§æ‡§ö‡§®‡§Æ‡§æ ‡§Æ‡§§‡§¶‡§æ‡§® ‡§ó‡§∞‡•ç‡§®‡•á", "‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø ‡§∏‡§Ç‡§ö‡§æ‡§≤‡§® ‡§ó‡§∞‡•ç‡§®‡•á", "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§¨‡§ø‡§Æ‡§æ ‡§§‡§ø‡§∞‡•ç‡§®‡•á", "‡§µ‡§ø‡§¶‡•á‡§∂ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ó‡§∞‡•ç‡§®‡•á"],
            correctAnswer: 0
        ),

        BilingualQuestion(
            englishText: "Who is the Father of Our Country?",
            nepaliText: "‡§π‡§æ‡§Æ‡•ç‡§∞‡•ã ‡§¶‡•á‡§∂‡§ï‡§æ ‡§™‡§ø‡§§‡§æ ‡§ï‡•ã ‡§π‡•Å‡§®‡•ç?",
            englishOptions: ["George Washington", "Thomas Jefferson", "Abraham Lincoln", "John Adams"],
            nepaliOptions: ["‡§ú‡§∞‡•ç‡§ú ‡§µ‡§æ‡§∂‡§ø‡§Ç‡§ó‡§ü‡§®", "‡§•‡•ã‡§Æ‡§∏ ‡§ú‡•á‡§´‡§∞‡§∏‡§®", "‡§Ö‡§¨‡•ç‡§∞‡§æ‡§π‡§Æ ‡§≤‡§ø‡§Ç‡§ï‡§®", "‡§ú‡•ã‡§π‡§® ‡§è‡§°‡§Æ‡•ç‡§∏"],
            correctAnswer: 0
        ),

        BilingualQuestion(
            englishText: "What is one promise you make when you become a U.S. citizen?",
            nepaliText: "‡§∏‡§Ç‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§Ö‡§Æ‡•á‡§∞‡§ø‡§ï‡§æ‡§ï‡•ã ‡§®‡§æ‡§ó‡§∞‡§ø‡§ï ‡§π‡•Å‡§Å‡§¶‡§æ ‡§§‡§™‡§æ‡§à‡§Å‡§≤‡•á ‡§ó‡§∞‡•ç‡§®‡•á ‡§è‡§â‡§ü‡§æ ‡§™‡•ç‡§∞‡§§‡§ø‡§ú‡•ç‡§û‡§æ ‡§ï‡•á ‡§π‡•ã?",
            englishOptions: ["Speak only English", "Always vote in elections", "Get a college degree", "Obey the laws of the United States"],
            nepaliOptions: ["‡§∏‡§ø‡§∞‡•ç‡§´ ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§¨‡•ã‡§≤‡•ç‡§®‡•á", "‡§∏‡§ß‡•à‡§Ç ‡§ö‡•Å‡§®‡§æ‡§µ‡§Æ‡§æ ‡§Æ‡§§‡§¶‡§æ‡§® ‡§ó‡§∞‡•ç‡§®‡•á", "‡§ï‡§≤‡•á‡§ú ‡§°‡§ø‡§ó‡•ç‡§∞‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ó‡§∞‡•ç‡§®‡•á", "‡§∏‡§Ç‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§Ö‡§Æ‡•á‡§∞‡§ø‡§ï‡§æ‡§ï‡•ã ‡§ï‡§æ‡§®‡•Å‡§® ‡§Æ‡§æ‡§®‡•ç‡§®‡•á"],
            correctAnswer: 3
        ),

        BilingualQuestion(
            englishText: "What ocean is on the West Coast of the United States?",
            nepaliText: "‡§∏‡§Ç‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§Ö‡§Æ‡•á‡§∞‡§ø‡§ï‡§æ‡§ï‡•ã ‡§™‡§∂‡•ç‡§ö‡§ø‡§Æ‡•Ä ‡§§‡§ü‡§Æ‡§æ ‡§ï‡•Å‡§® ‡§Æ‡§π‡§æ‡§∏‡§æ‡§ó‡§∞ ‡§õ?",
            englishOptions: ["Atlantic Ocean", "Pacific Ocean", "Indian Ocean", "Arctic Ocean"],
            nepaliOptions: ["‡§è‡§ü‡•ç‡§≤‡§æ‡§®‡•ç‡§ü‡§ø‡§ï ‡§Æ‡§π‡§æ‡§∏‡§æ‡§ó‡§∞", "‡§™‡•ç‡§∞‡§∂‡§æ‡§®‡•ç‡§§ ‡§Æ‡§π‡§æ‡§∏‡§æ‡§ó‡§∞", "‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§Æ‡§π‡§æ‡§∏‡§æ‡§ó‡§∞", "‡§Ü‡§∞‡•ç‡§ï‡§ü‡§ø‡§ï ‡§Æ‡§π‡§æ‡§∏‡§æ‡§ó‡§∞"],
            correctAnswer: 1
        ),

        BilingualQuestion(
            englishText: "What is the economic system in the United States?",
            nepaliText: "‡§∏‡§Ç‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§Ö‡§Æ‡•á‡§∞‡§ø‡§ï‡§æ‡§ï‡•ã ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä ‡§ï‡•á ‡§π‡•ã?",
            englishOptions: ["Socialism", "Communism", "Capitalism", "Monarchy"],
            nepaliOptions: ["‡§∏‡§æ‡§Æ‡•ç‡§Ø‡§µ‡§æ‡§¶", "‡§∏‡§æ‡§Æ‡•ç‡§Ø‡§µ‡§æ‡§¶", "‡§™‡•Ç‡§Å‡§ú‡•Ä‡§µ‡§æ‡§¶", "‡§∞‡§æ‡§ú‡§§‡§®‡•ç‡§§‡•ç‡§∞"],
            correctAnswer: 2
        ),

        BilingualQuestion(
            englishText: "How many voting members are in the House of Representatives?",
            nepaliText: "‡§™‡•ç‡§∞‡§§‡§ø‡§®‡§ø‡§ß‡§ø ‡§∏‡§≠‡§æ‡§Æ‡§æ ‡§ï‡§§‡§ø ‡§ú‡§®‡§æ ‡§Æ‡§§‡§¶‡§æ‡§® ‡§∏‡§¶‡§∏‡•ç‡§Ø‡§π‡§∞‡•Ç ‡§õ‡§®‡•ç?",
            englishOptions: ["200", "100", "50", "435"],
            nepaliOptions: ["‡•®‡•¶‡•¶", "‡•ß‡•¶‡•¶", "‡•´‡•¶", "‡•™‡•©‡•´"],
            correctAnswer: 3
        ),

        BilingualQuestion(
            englishText: "What is the rule of law?",
            nepaliText: "‡§ï‡§æ‡§®‡•Å‡§®‡§ï‡•ã ‡§∂‡§æ‡§∏‡§® ‡§≠‡§®‡•á‡§ï‡•ã ‡§ï‡•á ‡§π‡•ã?",
            englishOptions: ["Everyone must follow the law", "The President is above the law", "Judges are above the law", "Only lawmakers follow the law"],
            nepaliOptions: ["‡§∏‡§¨‡•à‡§≤‡•á ‡§ï‡§æ‡§®‡•Å‡§® ‡§Æ‡§æ‡§®‡•ç‡§®‡•Å‡§™‡§∞‡•ç‡§õ", "‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡§™‡§§‡§ø ‡§ï‡§æ‡§®‡•Å‡§®‡§≠‡§®‡•ç‡§¶‡§æ ‡§Æ‡§æ‡§•‡§ø ‡§õ‡§®‡•ç", "‡§®‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§ß‡•Ä‡§∂‡§π‡§∞‡•Ç ‡§ï‡§æ‡§®‡•Å‡§®‡§≠‡§®‡•ç‡§¶‡§æ ‡§Æ‡§æ‡§•‡§ø ‡§õ‡§®‡•ç", "‡§∏‡§ø‡§∞‡•ç‡§´ ‡§ï‡§æ‡§®‡•Å‡§® ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§§‡§æ‡§π‡§∞‡•Ç ‡§ï‡§æ‡§®‡•Å‡§® ‡§™‡§æ‡§≤‡§®‡§æ ‡§ó‡§∞‡•ç‡§õ‡§®‡•ç"],
            correctAnswer: 0
        ),

        BilingualQuestion(
            englishText: "What is freedom of religion?",
            nepaliText: "‡§ß‡§∞‡•ç‡§Æ‡§ï‡•ã ‡§∏‡•ç‡§µ‡§§‡§®‡•ç‡§§‡•ç‡§∞‡§§‡§æ ‡§≠‡§®‡•á‡§ï‡•ã ‡§ï‡•á ‡§π‡•ã?",
            englishOptions: ["You can only practice major religions", "You must follow the government religion", "You can practice any religion, or not practice a religion", "You can never change your religion"],
            nepaliOptions: ["‡§§‡§™‡§æ‡§à‡§Ç ‡§ï‡•á‡§µ‡§≤ ‡§™‡•ç‡§∞‡§Æ‡•Å‡§ñ ‡§ß‡§∞‡•ç‡§Æ‡§π‡§∞‡•Ç ‡§Æ‡§æ‡§§‡•ç‡§∞ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ó‡§∞‡•ç‡§® ‡§∏‡§ï‡•ç‡§®‡•Å‡§π‡•Å‡§®‡•ç‡§õ", "‡§§‡§™‡§æ‡§à‡§Ç ‡§∏‡§∞‡§ï‡§æ‡§∞‡§ï‡•ã ‡§ß‡§∞‡•ç‡§Æ ‡§™‡§æ‡§≤‡§®‡§æ ‡§ó‡§∞‡•ç‡§®‡•à‡§™‡§∞‡•ç‡§õ", "‡§§‡§™‡§æ‡§à‡§Ç ‡§ï‡•Å‡§®‡•à ‡§™‡§®‡§ø ‡§ß‡§∞‡•ç‡§Æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ó‡§∞‡•ç‡§® ‡§∏‡§ï‡•ç‡§®‡•Å‡§π‡•Å‡§®‡•ç‡§õ, ‡§µ‡§æ ‡§ï‡•Å‡§®‡•à ‡§™‡§®‡§ø ‡§ß‡§∞‡•ç‡§Æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§®‡§ó‡§∞‡•ç‡§® ‡§∏‡§ï‡•ç‡§®‡•Å‡§π‡•Å‡§®‡•ç‡§õ", "‡§§‡§™‡§æ‡§à‡§Ç ‡§Ü‡§´‡•ç‡§®‡•ã ‡§ß‡§∞‡•ç‡§Æ ‡§ï‡§π‡§ø‡§≤‡•ç‡§Ø‡•à ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§® ‡§ó‡§∞‡•ç‡§® ‡§∏‡§ï‡•ç‡§®‡•Å‡§π‡•Å‡§®‡•ç‡§®"],
            correctAnswer: 2
        ),

        BilingualQuestion(
            englishText: "What does the Constitution do?",
            nepaliText: "‡§∏‡§Ç‡§µ‡§ø‡§ß‡§æ‡§®‡§≤‡•á ‡§ï‡•á ‡§ó‡§∞‡•ç‡§õ?",
            englishOptions: ["Declares war", "Defines laws for voting", "Sets up the government", "Gives advice to the President"],
            nepaliOptions: ["‡§Ø‡•Å‡§¶‡•ç‡§ß ‡§ò‡•ã‡§∑‡§£‡§æ ‡§ó‡§∞‡•ç‡§õ", "‡§Æ‡§§‡§¶‡§æ‡§®‡§ï‡§æ ‡§≤‡§æ‡§ó‡§ø ‡§ï‡§æ‡§®‡•Å‡§® ‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§ø‡§§ ‡§ó‡§∞‡•ç‡§õ", "‡§∏‡§∞‡§ï‡§æ‡§∞ ‡§ó‡§†‡§® ‡§ó‡§∞‡•ç‡§õ", "‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡§™‡§§‡§ø‡§≤‡§æ‡§à ‡§∏‡§≤‡•ç‡§≤‡§æ‡§π ‡§¶‡§ø‡§®‡•ç‡§õ"],
            correctAnswer: 2
        ),

        BilingualQuestion(
            englishText: "What stops one branch of government from becoming too powerful?",
            nepaliText: "‡§∏‡§∞‡§ï‡§æ‡§∞‡§ï‡•ã ‡§è‡§â‡§ü‡§æ ‡§∂‡§æ‡§ñ‡§æ‡§≤‡§æ‡§à ‡§Ö‡§§‡•ç‡§Ø‡§ß‡§ø‡§ï ‡§∂‡§ï‡•ç‡§§‡§ø‡§∂‡§æ‡§≤‡•Ä ‡§¨‡§®‡•ç‡§®‡§¨‡§æ‡§ü ‡§ï‡•á‡§≤‡•á ‡§∞‡•ã‡§ï‡•ç‡§õ?",
            englishOptions: ["The Supreme Court", "The military", "The people", "Checks and balances"],
            nepaliOptions: ["‡§∏‡§∞‡•ç‡§µ‡•ã‡§ö‡•ç‡§ö ‡§Ö‡§¶‡§æ‡§≤‡§§", "‡§∏‡•á‡§®‡§æ", "‡§ú‡§®‡§§‡§æ", "‡§ú‡§æ‡§Å‡§ö ‡§∞ ‡§∏‡§®‡•ç‡§§‡•Å‡§≤‡§®"],
            correctAnswer: 3
        ),

        BilingualQuestion(
            englishText: "Name one branch or part of the government.",
            nepaliText: "‡§∏‡§∞‡§ï‡§æ‡§∞‡§ï‡•ã ‡§è‡§â‡§ü‡§æ ‡§∂‡§æ‡§ñ‡§æ ‡§µ‡§æ ‡§≠‡§æ‡§ó‡§ï‡•ã ‡§®‡§æ‡§Æ ‡§≤‡§ø‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§",
            englishOptions: ["Lawmakers", "Legislative branch (Congress)", "Governors", "The Police"],
            nepaliOptions: ["‡§ï‡§æ‡§®‡•Å‡§® ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§§‡§æ", "‡§µ‡§ø‡§ß‡§æ‡§Ø‡§ø‡§ï‡§æ ‡§∂‡§æ‡§ñ‡§æ (‡§ï‡§æ‡§Ç‡§ó‡•ç‡§∞‡•á‡§∏)", "‡§∞‡§æ‡§ú‡•ç‡§Ø‡§™‡§æ‡§≤‡§π‡§∞‡•Ç", "‡§™‡•ç‡§∞‡§π‡§∞‡•Ä"],
            correctAnswer: 1
        ),

        BilingualQuestion(
            englishText: "What is an amendment?",
            nepaliText: "‡§∏‡§Ç‡§∂‡•ã‡§ß‡§® ‡§≠‡§®‡•á‡§ï‡•ã ‡§ï‡•á ‡§π‡•ã?",
            englishOptions: ["A change to the Constitution", "A law", "A government branch", "A tax"],
            nepaliOptions: ["‡§∏‡§Ç‡§µ‡§ø‡§ß‡§æ‡§®‡§Æ‡§æ ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§®", "‡§è‡§â‡§ü‡§æ ‡§ï‡§æ‡§®‡•Å‡§®", "‡§è‡§â‡§ü‡§æ ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§∂‡§æ‡§ñ‡§æ", "‡§è‡§â‡§ü‡§æ ‡§ï‡§∞"],
            correctAnswer: 0
        )
    ]

    
    var body: some View {
        ScrollView {
        VStack(spacing: 20) {
            HStack {
                Button(action: { quizLogic.switchLanguage(to: .english) }) {
                    Text("üá∫üá∏ English")
                        .padding()
                        .background(quizLogic.selectedLanguage == .english ? Color.blue : Color.gray)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                }
                Spacer()
                
                Button(action: { quizLogic.switchLanguage(to: .nepali) }) {
                    Text("üá≥üáµ ‡§®‡•á‡§™‡§æ‡§≤‡•Ä")
                        .padding()
                        .background(quizLogic.selectedLanguage == .nepali ? Color.blue : Color.gray)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                }
            }
            .padding()
            
            if quizLogic.showResult {
                Text(quizLogic.selectedLanguage == .english ? "Quiz Completed!" : "‡§ï‡•ç‡§µ‡§ø‡§ú ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§≠‡§Ø‡•ã!")
                    .font(.largeTitle)
                    .fontWeight(.bold)
                    .foregroundColor(.white)
                Text(quizLogic.selectedLanguage == .english ? "Correct Answers: \(quizLogic.correctAnswers)" : "‡§∏‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞‡§π‡§∞‡•Ç: \(quizLogic.correctAnswers)")
                    .foregroundColor(.green)
                Text(quizLogic.selectedLanguage == .english ? "Incorrect Answers: \(quizLogic.incorrectAnswers)" : "‡§ó‡§≤‡§§ ‡§â‡§§‡•ç‡§§‡§∞‡§π‡§∞‡•Ç: \(quizLogic.incorrectAnswers)")
                    .foregroundColor(.red)
                
                Button(quizLogic.selectedLanguage == .english ? "Restart Quiz" : "‡§™‡•Å‡§®: ‡§∏‡•Å‡§∞‡•Å ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç") {
                    quizLogic.startQuiz()
                    selectedAnswer = nil
                    showAnswerFeedback = false
                    isAnswered = false
                }
                .padding()
                .background(Color.blue)
                .foregroundColor(.white)
                .cornerRadius(10)
                
            } else {
                Text("\(quizLogic.currentQuestionIndex + 1). \(quizLogic.selectedLanguage == .english ? quizLogic.currentQuestion.englishText : quizLogic.currentQuestion.nepaliText)")
                    .font(.title).bold()
                    .foregroundColor(.white)
                    .padding()
                    .padding(.bottom, 20)

                ForEach(0..<quizLogic.currentQuestion.englishOptions.count, id: \.self) { index in
                    Button(action: {
                        if !isAnswered {
                            selectedAnswer = index
                            isAnswerCorrect = quizLogic.answerQuestion(index)
                            showAnswerFeedback = true
                            isAnswered = true
                        }
                    }) {
                        Text(quizLogic.selectedLanguage == .english ?
                             quizLogic.currentQuestion.englishOptions[index] :
                                quizLogic.currentQuestion.nepaliOptions[index])
                        .foregroundColor(.white)
                        .padding()
                        .frame(maxWidth: .infinity, minHeight: 50)
                        .background(
                            isAnswered
                            ? (index == quizLogic.currentQuestion.correctAnswer ? Color.green : Color.red)
                            : Color.blue
                        )
                        .cornerRadius(10)
                    }
                    .disabled(isAnswered)
                }
                
                if showAnswerFeedback {
                    
                    Text(isAnswerCorrect ? "‚úÖ \(quizLogic.selectedLanguage == .english ? "Correct!" : "‡§∏‡§π‡•Ä!")‚úÖ" : "‚ùå \(quizLogic.selectedLanguage == .english ? "Wrong!" : "‡§ó‡§≤‡§§!")‚ùå")
                        .font(.headline)
                        .foregroundColor(isAnswerCorrect ? .green : .red)
                        .padding()
                    
                    Button(quizLogic.selectedLanguage == .english ? "Next Question" : "‡§Ö‡§∞‡•ç‡§ï‡•ã ‡§™‡•ç‡§∞‡§∂‡•ç‡§®") {
                        quizLogic.moveToNextQuestion()
                        showAnswerFeedback = false
                        selectedAnswer = nil
                        isAnswered = false
                    }
                    .padding()
                    .background(Color.orange)
                    .foregroundColor(.white)
                    .cornerRadius(10)
                    
                } else {
                    HStack {
                        Button(action: {
                            quizLogic.previousQuestion()
                            selectedAnswer = nil
                            showAnswerFeedback = false
                            isAnswered = false
                        }) {
                            Text(quizLogic.selectedLanguage == .english ? "Previous" : "‡§Ö‡§ò‡§ø‡§≤‡•ç‡§≤‡•ã")
                                .foregroundColor(.white)
                                .padding()
                                .background(Color.gray)
                                .cornerRadius(10)
                        }
                        .disabled(quizLogic.currentQuestionIndex == 0)
                        
                        Spacer()
                        
                        Button(action: {
                            quizLogic.moveToNextQuestion()
                            selectedAnswer = nil
                            showAnswerFeedback = false
                            isAnswered = false
                        }) {
                            Text(quizLogic.selectedLanguage == .english ? "Skip" : "‡§õ‡•ã‡§°‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç")
                                .foregroundColor(.white)
                                .padding()
                                .background(Color.orange)
                                .cornerRadius(10)
                        }
                        .disabled(quizLogic.showResult)
                    }
                    .padding()
                }
            }
        }
    }
            .navigationBarBackButtonHidden(true)
            .padding()
            .onAppear {
                quizLogic.questions = questions
                quizLogic.startQuiz()
            }
            .frame(maxWidth: .infinity, maxHeight: .infinity)
            .background(
                Image("USANepal")
                    .resizable()
                    .scaledToFill()
                    .ignoresSafeArea()
                    .overlay(Color.black.opacity(0.8))
            )
        
            .toolbar {
                ToolbarItem(placement: .principal) {
                    Text(quizLogic.selectedLanguage == .english ? "Practice 2" : "‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡•®")
                        .font(.title)
                        .fontWeight(.bold)
                        .foregroundColor(.green)
                    }
                }
        
            .navigationBarItems(trailing:
                Button(action: {
                    showQuitConfirmation = true
                }) {
                    Text(quizLogic.selectedLanguage == .english ? "Quit" : "‡§õ‡•ã‡§°‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç")
                        .foregroundColor(.red)
                        .font(.title)
                }
            )
            .alert(isPresented: $showQuitConfirmation) {
                Alert(
                    title: Text(quizLogic.selectedLanguage == .english ? "Quit Quiz?" : "‡§ï‡•ç‡§µ‡§ø‡§ú ‡§õ‡•ã‡§°‡•ç‡§®‡•Å‡§π‡•Å‡§®‡•ç‡§õ?"),
                    message: Text(quizLogic.selectedLanguage == .english ? "Are you sure you want to quit?" : "‡§ï‡•á ‡§§‡§™‡§æ‡§à‡§Å ‡§™‡§ï‡•ç‡§ï‡§æ ‡§õ‡•ã‡§°‡•ç‡§® ‡§ö‡§æ‡§π‡§®‡•Å‡§π‡•Å‡§®‡•ç‡§õ?"),
                    primaryButton: .destructive(Text(quizLogic.selectedLanguage == .english ? "Yes" : "‡§π‡•ã")) {
                        presentationMode.wrappedValue.dismiss()
                    },
                    secondaryButton: .cancel(Text(quizLogic.selectedLanguage == .english ? "No" : "‡§π‡•ã‡§á‡§®"))
                )
            }
        }
    }
